# -*- coding: utf-8 -*-
"""Ajuste_Calibracion_Peliculas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eZcjaKya34L-OpmjUhLgrFsPy6aICzau
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Datos
# =======================================
dosis = np.array([
    0, 45.5, 90.5, 135, 182.5, 226.6, 275.8, 321.7, 364.5, 411,
    456.7, 509.3, 546.6, 592.1, 637.6, 683.2, 728.7, 774.3, 819.8, 865.4, 910.9
])

vp = np.array([
    43510.6375, 28078.8625, 20682, 16991.65, 13023.475, 11005.9875,
    9901.275, 8640.035, 7801.62125, 7289.0975, 6559.3375, 5994.31125,
    5664.925, 5196.53875, 4937.2675, 4700.78875, 4480.56625,
    4291.97875, 4131.7675, 3873.11375, 3747.88875
])

# Errores en VP y en dosis
err_vp = np.array([
    159.329846, 251.5955367, 288.4327503, 184.0992512, 179.6095428,
    80.78559697, 93.5051832, 93.75395504, 101.5943272, 133.0705679,
    93.21296564, 77.42332344, 29.93749441, 61.30587258, 83.46084724,
    69.62201529, 42.0789119, 36.51765774, 34.74238077, 53.23469409,
    42.23704043
])

err_dosis = np.array([
    0, 2.275, 4.525, 6.75, 9.125, 11.33, 13.79, 16.085, 18.225, 20.55,
    22.835, 25.465, 27.33, 29.605, 31.88, 34.16, 36.435, 38.715, 40.99,
    43.27, 45.545
])

# --------------------------------------------------------------------
# Separar los datos en dos grupos:
# Grupo 1: Primeros 7 datos para ajuste exponencial
dosis_exp   = dosis[:7]
vp_exp      = vp[:7]
err_vp_exp  = err_vp[:7]
err_dosis_exp = err_dosis[:7]

# Grupo 2: Datos desde el índice 7 en adelante para ajuste polinomial (grado 2)
dosis_poly  = dosis[7:]
vp_poly     = vp[7:]
err_vp_poly = err_vp[7:]
err_dosis_poly = err_dosis[7:]

# 1. Ajuste exponencial para los primeros 7 datos
def modelo_exp(x, a, b, c):
    """Modelo exponencial: y = a * exp(-b*x) + c"""
    return a * np.exp(-b * x) + c

# Valores iniciales para el ajuste
p0_exp = [vp_exp[0], 0.01, vp_exp[-1]]

# Realizamos el ajuste ponderado con err_vp_exp
popt_exp, pcov_exp = curve_fit(modelo_exp, dosis_exp, vp_exp, p0=p0_exp, sigma=err_vp_exp, absolute_sigma=True)
a_exp, b_exp, c_exp = popt_exp
a_exp_err, b_exp_err, c_exp_err = np.sqrt(np.diag(pcov_exp))

# Predicciones y métricas del ajuste exponencial
y_exp_model = modelo_exp(dosis_exp, *popt_exp)
residuals_exp = vp_exp - y_exp_model
ss_res_exp = np.sum(residuals_exp**2)
ss_tot_exp = np.sum((vp_exp - np.mean(vp_exp))**2)
r2_exp = 1 - (ss_res_exp / ss_tot_exp)
chi2_exp = np.sum(((vp_exp - y_exp_model) / err_vp_exp)**2)
dof_exp = len(vp_exp) - len(popt_exp)
chi2_red_exp = chi2_exp / dof_exp
rmse_exp = np.sqrt(ss_res_exp / len(vp_exp))

# Generamos puntos para graficar la curva de ajuste exponencial
x_fit_exp = np.linspace(dosis_exp.min(), dosis_exp.max(), 200)
y_fit_exp = modelo_exp(x_fit_exp, *popt_exp)

# Texto de la ecuación y métricas para el ajuste exponencial
ecuacion_exp_texto = (
    f"Exp: y = {a_exp:.2f} exp(-{b_exp:.6f} x) + {c_exp:.2f}\n"
    f"R² = {r2_exp:.4f}, χ²_red = {chi2_red_exp:.2f}, RMSE = {rmse_exp:.2f}"
)

# 2. Ajuste polinomial de segundo grado para los datos restantes
# Usamos np.polyfit con pesos (1/err_vp_poly) y solicitamos la matriz de covarianza
popt_poly, cov_poly = np.polyfit(dosis_poly, vp_poly, 2, w=1/err_vp_poly, cov=True)
# Los coeficientes se retornan en orden descendente: [p2, p1, p0]
p2, p1, p0_poly = popt_poly
p2_err, p1_err, p0_err = np.sqrt(np.diag(cov_poly))

# Predicciones y métricas del ajuste polinomial
y_poly_model = np.polyval(popt_poly, dosis_poly)
residuals_poly = vp_poly - y_poly_model
ss_res_poly = np.sum(residuals_poly**2)
ss_tot_poly = np.sum((vp_poly - np.mean(vp_poly))**2)
r2_poly = 1 - (ss_res_poly / ss_tot_poly)
chi2_poly = np.sum(((vp_poly - y_poly_model) / err_vp_poly)**2)
dof_poly = len(vp_poly) - len(popt_poly)
chi2_red_poly = chi2_poly / dof_poly
rmse_poly = np.sqrt(ss_res_poly / len(vp_poly))

# Generamos puntos para graficar la curva de ajuste polinomial
x_fit_poly = np.linspace(dosis_poly.min(), dosis_poly.max(), 200)
y_fit_poly = np.polyval(popt_poly, x_fit_poly)

# Texto de la ecuación y métricas para el ajuste polinomial
ecuacion_poly_texto = (
    f"Poly: y = {p2:.6e}x² + {p1:.6e}x + {p0_poly:.2f}\n"
    f"R² = {r2_poly:.4f}, χ²_red = {chi2_red_poly:.2f}, RMSE = {rmse_poly:.2f}"
)

# Gráficas: Creamos dos subplots para visualizar ambos ajustes
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

# Gráfica del ajuste exponencial (primeros 7 datos)
ax1.errorbar(dosis_exp, vp_exp, xerr=err_dosis_exp, yerr=err_vp_exp, fmt='o',
             capsize=3, ecolor='gray', label='Datos experimentales')
ax1.plot(x_fit_exp, y_fit_exp, 'r--', label=ecuacion_exp_texto)
ax1.set_xlabel('Dosis [cGy]')
ax1.set_ylabel('Valor promedio de píxel [VP]')
ax1.set_title('Ajuste Exponencial (primeros 7 datos)')
ax1.legend()
ax1.grid(True)

# Gráfica del ajuste polinomial (datos desde el índice 7)
ax2.errorbar(dosis_poly, vp_poly, xerr=err_dosis_poly, yerr=err_vp_poly, fmt='o',
             capsize=3, ecolor='gray', label='Datos experimentales')
ax2.plot(x_fit_poly, y_fit_poly, 'r--', label=ecuacion_poly_texto)
ax2.set_xlabel('Dosis [cGy]')
ax2.set_ylabel('Valor promedio de píxel [VP]')
ax2.set_title('Ajuste Polinomial de Segundo Grado (resto de datos)')
ax2.legend()
ax2.grid(True)

plt.tight_layout()
plt.show()

# Impresión en consola de los parámetros y las métricas de cada ajuste
print("Ajuste Exponencial (primeros 7 datos):")
print(f"a = {a_exp:.4f} ± {a_exp_err:.4f}")
print(f"b = {b_exp:.6f} ± {b_exp_err:.6f}")
print(f"c = {c_exp:.4f} ± {c_exp_err:.4f}")
print(f"R² = {r2_exp:.4f}")
print(f"χ² reducido = {chi2_red_exp:.2f}")
print(f"RMSE = {rmse_exp:.2f}\n")

print("Ajuste Polinomial de Segundo Grado (datos desde el índice 7):")
print(f"p2 = {p2:.6e} ± {p2_err:.6e}")
print(f"p1 = {p1:.6e} ± {p1_err:.6e}")
print(f"p0 = {p0_poly:.4f} ± {p0_err:.4f}")
print(f"R² = {r2_poly:.4f}")
print(f"χ² reducido = {chi2_red_poly:.2f}")
print(f"RMSE = {rmse_poly:.2f}")
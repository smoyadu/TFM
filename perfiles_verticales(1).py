# -*- coding: utf-8 -*-
"""Perfiles Verticales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nujeHR_EvCNw3mTrdQP3rcU57gDf0U2-
"""

import pandas as pd
import matplotlib.pyplot as plt
from io import StringIO
import numpy as np
from scipy.interpolate import interp1d

# Función para calcular FWHM (Full Width Half Maximum)
def calcular_fwhm(posicion, dosis):
    max_dosis = max(dosis)
    half_max_dosis = max_dosis / 2

    # Interpolar los datos para encontrar el FWHM con mayor precisión
    interp_func = interp1d(posicion, dosis)

    # Encontrar posiciones a la mitad de la dosis máxima
    posiciones_half_max = np.where(dosis >= half_max_dosis)[0]

    if len(posiciones_half_max) > 1:
        fwhm = abs(posicion[posiciones_half_max[-1]] - posicion[posiciones_half_max[0]])
        return fwhm
    else:
        return None

# Función corregida para calcular la simetría y planitud
def calcular_simetria_planitud(posicion, dosis):
    # Simetría: Compara la dosis a ambos lados del eje central (posicion 0)
    indice_central = np.argmin(np.abs(posicion))  # Encuentra el índice más cercano a 0 (eje central)
    dosis_central = dosis[indice_central]

    izquierda = dosis[:indice_central]
    derecha = dosis[indice_central+1:][::-1]  # Invertir la parte derecha para comparar con la izquierda

    # Asegurarnos de que las dos partes tengan la misma longitud
    if len(izquierda) > len(derecha):
        izquierda = izquierda[:len(derecha)]
    elif len(derecha) > len(izquierda):
        derecha = derecha[:len(izquierda)]

    simetria = np.mean(np.abs(izquierda - derecha) / dosis_central) * 100  # Error relativo porcentual

    # Planitud: Variación dentro del área entre el 80% y 100% de la dosis máxima
    max_dosis = max(dosis)
    limite_inferior = 0.8 * max_dosis

    # Filtrar la región de interés (dosis >= 80% de la dosis máxima)
    indices_region = np.where(dosis >= limite_inferior)[0]

    if len(indices_region) > 0:
        dosis_region = dosis[indices_region]
        max_region = max(dosis_region)
        min_region = min(dosis_region)
        planitud = (max_region - min_region) / (max_region + min_region) * 100
    else:
        planitud = None

    return simetria, planitud

""" Data = cm, cGy """

p4datos = """
-3.9225,0
-3.8867,0
-3.8508,0
-3.815,0
-3.7792,0
-3.7433,0
-3.7075,0
-3.6717,0
-3.6358,0
-3.6,0
-3.5642,0
-3.5283,32.6024
-3.4925,36.4244
-3.4567,38.9075
-3.4208,40.9512
-3.385,43.288
-3.3492,44.7933
-3.3133,45.6884
-3.2775,46.1687
-3.2417,46.3331
-3.2058,46.3922
-3.17,46.3542
-3.1342,46.3457
-3.0983,46.3457
-3.0625,46.1057
-3.0266,45.98
-2.9908,45.5353
-2.955,45.0364
-2.9191,44.5627
-2.8833,44.3198
-2.8475,43.6372
-2.8116,43.3701
-2.7758,43.2346
-2.74,43.1033
-2.7041,42.9228
-2.6683,42.8735
-2.6325,42.7546
-2.5966,42.5374
-2.5608,42.4391
-2.525,42.4309
-2.4891,42.1892
-2.4533,41.9805
-2.4175,41.9233
-2.3816,41.9028
-2.3458,41.9396
-2.31,42.1115
-2.2741,42.2097
-2.2383,42.2916
-2.2025,42.2916
-2.1666,42.2711
-2.1308,42.2466
-2.095,42.2138
-2.0591,42.0624
-2.0233,42.0214
-1.9875,41.9683
-1.9516,41.7515
-1.9158,41.6738
-1.88,41.6411
-1.8441,41.5962
-1.8083,41.5308
-1.7725,41.5145
-1.7366,41.4899
-1.7008,41.4164
-1.665,41.4859
-1.6291,41.4859
-1.5933,41.5512
-1.5575,41.6779
-1.5216,41.7433
-1.4858,41.6779
-1.45,41.7883
-1.4141,41.7883
-1.3783,41.6657
-1.3425,41.6657
-1.3066,41.7024
-1.2708,41.7024
-1.235,41.6984
-1.1991,41.6984
-1.1633,41.6084
-1.1274,41.6084
-1.0916,41.5185
-1.0558,41.494
-1.0199,41.3388
-0.98411,41.1184
-0.94828,41.0735
-0.91245,41.0205
-0.87661,40.6699
-0.84078,40.5844
-0.80494,40.5518
-0.76911,40.5518
-0.73328,40.6129
-0.69744,40.7474
-0.66161,40.837
-0.62577,40.8656
-0.58994,41.1184
-0.55411,41.2449
-0.51827,41.4859
-0.48244,41.5022
-0.4466,41.5308
-0.41077,41.5594
-0.37494,41.6943
-0.3391,41.6575
-0.30327,41.6779
-0.26743,41.6738
-0.2316,41.6575
-0.19577,41.6493
-0.15993,41.6207
-0.1241,41.6084
-0.088264,41.6084
-0.05243,41.5962
-0.016596,41.6125
0.019238,41.7188
0.055072,41.7474
0.090906,41.821
0.12674,41.8905
0.16257,41.8905
0.19841,41.9396
0.23424,42.0828
0.27008,42.2507
0.30591,42.2834
0.34174,42.2507
0.37758,42.2384
0.41341,42.2384
0.44925,42.1811
0.48508,42.1115
0.52091,42.1115
0.55675,42.0296
0.59258,41.8905
0.62841,41.8292
0.66425,41.7556
0.70008,41.7229
0.73592,41.7188
0.77175,41.7515
0.80758,41.821
0.84342,41.8783
0.87925,41.9273
0.91509,42.001
0.95092,42.0746
0.98675,42.1483
1.0226,42.1483
1.0584,42.0869
1.0943,42.0869
1.1301,42.0542
1.1659,42.0869
1.2018,42.1319
1.2376,42.2507
1.2734,42.394
1.3093,42.5784
1.3451,42.6808
1.3809,42.7915
1.4168,42.7259
1.4526,42.7505
1.4884,42.8243
1.5243,42.8243
1.5601,42.8818
1.5959,42.9474
1.6318,42.9392
1.6676,42.8489
1.7034,42.8079
1.7393,42.7505
1.7751,42.7013
1.8109,42.7341
1.8468,42.8407
1.8826,42.9105
1.9184,43.0048
1.9543,43.0089
1.9901,43.0253
2.0259,43.0458
2.0618,43.0787
2.0976,43.247
2.1334,43.3003
2.1693,43.2921
2.2051,43.2921
2.2409,43.2921
2.2768,43.1731
2.3126,43.0869
2.3484,43.0541
2.3843,42.89
2.4201,42.5907
2.4559,42.4759
2.4918,42.3489
2.5276,42.2752
2.5634,42.2015
2.5993,42.2015
2.6351,42.1238
2.671,41.9601
2.7068,41.8578
2.7426,41.8578
2.7785,41.9233
2.8143,41.9233
2.8501,41.9396
2.886,41.9928
2.9218,42.0624
2.9576,42.0419
2.9935,42.0133
3.0293,42.0419
3.0651,41.9764
3.101,41.9642
3.1368,41.9764
3.1726,42.0665
3.2085,42.0869
3.2443,42.0665
3.2801,41.8087
3.316,41.5553
3.3518,40.7188
3.3876,40.3523
3.4235,39.0168
3.4593,36.5565
3.4951,29.5419
3.531,0
3.5668,0
3.6026,0
3.6385,0
3.6743,0
3.7101,0
3.746,0
3.7818,0
3.8176,0
3.8535,0
3.8893,0
3.9251,0
3.961,0
3.9968,0
4.0326,0
4.0685,0
"""

p3datos = """
-3.9812,0
-3.9453,0
-3.9095,0
-3.8737,0
-3.8378,0
-3.802,0
-3.7662,0
-3.7303,0
-3.6945,0
-3.6587,0
-3.6228,5.7872
-3.587,193.4878
-3.5512,209.2618
-3.5153,244.5125
-3.4795,281.262
-3.4436,305.2884
-3.4078,328.1244
-3.372,359.9305
-3.3361,372.0648
-3.3003,381.4974
-3.2645,385.5495
-3.2286,387.265
-3.1928,387.8379
-3.157,390.2965
-3.1211,391.5261
-3.0853,391.6081
-3.0495,391.9358
-3.0136,393.0002
-2.9778,395.2049
-2.942,395.2049
-2.9061,395.2049
-2.8703,395.2049
-2.8345,395.2049
-2.7986,395.5306
-2.7628,399.1703
-2.727,402.9048
-2.6911,403.3752
-2.6553,403.6879
-2.6195,403.6879
-2.5836,403.6879
-2.5478,406.161
-2.512,406.161
-2.4761,407.4524
-2.4403,407.4524
-2.4045,408.0541
-2.3686,408.4282
-2.3328,410.4197
-2.297,409.1715
-2.2611,409.7613
-2.2253,406.6187
-2.1895,405.5477
-2.1536,405.3169
-2.1178,406.3138
-2.082,406.3901
-2.0461,407.9791
-2.0103,410.3468
-1.9745,412.0043
-1.9386,410.3468
-1.9028,409.3932
-1.867,409.6143
-1.8311,406.5426
-1.7953,405.5477
-1.7595,406.161
-1.7236,406.161
-1.6878,405.5477
-1.652,403.766
-1.6161,403.1402
-1.5803,403.1402
-1.5444,403.1402
-1.5086,405.4708
-1.4728,406.4664
-1.4369,407.5278
-1.4011,404.6214
-1.3653,404.2333
-1.3294,403.6879
-1.2936,403.3752
-1.2578,403.6879
-1.2219,406.008
-1.1861,408.2787
-1.1503,408.2787
-1.1144,408.2787
-1.0786,406.0846
-1.0428,405.7781
-1.0069,405.1627
-0.97111,405.1627
-0.93527,405.3939
-0.89944,406.6948
-0.8636,409.6878
-0.82777,409.7613
-0.79194,409.8348
-0.7561,409.8348
-0.72027,409.7613
-0.68443,409.7613
-0.6486,409.8348
-0.61277,410.4197
-0.57693,409.7613
-0.5411,409.7613
-0.50527,410.4197
-0.46943,411
-0.4336,410.0546
-0.39776,411
-0.36193,411.1444
-0.3261,411.1444
-0.29026,412.2177
-0.25443,413.2051
-0.21859,411.6473
-0.18276,412.854
-0.14693,412.854
-0.11109,411.6473
-0.075258,412.854
-0.039424,412.9244
-0.0035898,412.9244
0.032244,413.2051
0.068078,413.2051
0.10391,412.5719
0.13975,413.3451
0.17558,413.7635
0.21141,414.1104
0.24725,414.1104
0.28308,414.1796
0.31892,413.5546
0.35475,412.0755
0.39058,410.6378
0.42642,411.3603
0.46225,410.6378
0.49809,409.3932
0.53392,409.9081
0.56975,409.6878
0.60559,409.9081
0.64142,410.0546
0.67726,413.2752
0.71309,415.4144
0.74892,416.1597
0.78476,416.3618
0.82059,416.6976
0.85643,415.4144
0.89226,417.032
0.92809,417.1654
0.96393,416.8315
0.99976,415.6863
1.0356,415.6863
1.0714,415.6863
1.1073,414.1796
1.1431,413.9025
1.1789,415.3463
1.2148,417.0987
1.2506,417.8294
1.2864,418.7509
1.3223,419.4687
1.3581,419.4037
1.3939,419.9876
1.4298,419.9876
1.4656,420.5684
1.5014,421.4658
1.5373,422.4835
1.5731,423.808
1.6089,424.6851
1.6448,424.6851
1.6806,425.5583
1.7164,425.5583
1.7523,423.6824
1.7881,424.3098
1.8239,426.118
1.8598,425.3715
1.8956,425.3715
1.9314,424.8101
1.9673,424.935
2.0031,424.935
2.0389,425.1222
2.0748,425.6206
2.1106,427.9147
2.1464,428.0383
2.1823,427.6055
2.2181,427.9147
2.2539,427.6055
2.2898,425.6206
2.3256,425.5583
2.3615,424.3724
2.3973,423.1787
2.4331,422.2933
2.469,421.721
2.5048,419.6636
2.5406,418.8163
2.5765,417.9616
2.6123,415.8895
2.6481,412.0755
2.684,409.9814
2.7198,408.6518
2.7556,405.7781
2.7915,404.6214
2.8273,401.3258
2.8631,399.8116
2.899,398.1241
2.9348,397.8013
2.9706,395.3678
3.0065,393.9813
3.0423,388.1655
3.0781,383.2733
3.114,379.02
3.1498,374.0305
3.1856,370.0687
3.2215,367.138
3.2573,361.437
3.2931,357.4632
3.329,351.7358
3.3648,342.7818
3.4006,331.8178
3.4365,309.6643
3.4723,275.1112
3.5081,218.3076
3.544,152.7317
3.5798,0
3.6156,0
3.6515,0
3.6873,0
3.7231,0
3.759,0
3.7948,0
3.8306,0
3.8665,0
3.9023,0
3.9381,0
3.974,0
4.0098,0


"""

p2datos = """

-3.9686,0
-3.9328,0
-3.897,0
-3.8611,0
-3.8253,0
-3.7895,0
-3.7536,0
-3.7178,0
-3.682,0
-3.6461,0
-3.6103,0
-3.5745,0
-3.5386,0
-3.5028,0
-3.467,0
-3.4311,0
-3.3953,294.0637
-3.3595,413.9025
-3.3236,533.3916
-3.2878,621.1634
-3.2519,703.1349
-3.2161,730.6874
-3.1803,739.1635
-3.1444,740.0979
-3.1086,743.8297
-3.0728,745.6946
-3.0369,749.4295
-3.0011,752.2411
-2.9653,756.0131
-2.9294,760.3019
-2.8936,760.3019
-2.8578,763.681
-2.8219,767.1067
-2.7861,769.3373
-2.7503,769.3373
-2.7144,777.2683
-2.6786,779.44
-2.6428,779.44
-2.6069, 785.6613
-2.5711, 785.6613
-2.5353,783.9349
-2.4994,783.3637
-2.4636,784.5083
-2.4278,784.7958
-2.3919, 786.531
-2.3561,796.2401
-2.3203,802.9471
-2.2844,807.1804
-2.2486,815.2988
-2.2128,821.3545
-2.1769,824.4024
-2.1411, 827.5764
-2.1053,827.7319
-2.0694,827.4198
-2.0336,823.6755
-1.9978,820.9459
-1.9619,820.3206
-1.9261,818.3551
-1.8903,813.8107
-1.8544,813.0501
-1.8186,809.3688
-1.7828,809.3688
-1.7469,809.3688
-1.7111,809.3688
-1.6753,810.9715
-1.6394,809.3688
-1.6036,801.2166
-1.5678,801.2166
-1.5319,798.8854
-1.4961,798.8854
-1.4603,798.8854
-1.4244,798.8854
-1.3886,798.8854
-1.3527,796.5348
-1.3169,790.9255
-1.2811,791.2203
-1.2452, 791.2203
-1.2094,790.9255
-1.1736, 790.6308
-1.1377, 788.5737
-1.1019, 787.1128
-1.0661, 781.6651
-1.0302, 781.6651
-0.99441, 779.9916
-0.95858, 777.5365
-0.92274, 769.5866
-0.88691, 767.1067
-0.85107, 766.6142
-0.81524, 767.1067
-0.77941, 769.0883
-0.74357, 776.7347
-0.70774, 778.0759
-0.6719,779.9916
-0.63607, 785.0838
-0.60024, 787.6962
-0.5644, 787.9884
-0.52857, 787.9884
-0.49273, 788.5737
-0.4569, 789.4539
-0.42107, 789.4539
-0.38523, 789.4539
-0.3494, 788.5737
-0.31356, 787.1128
-0.27773, 781.9466
-0.2419, 774.6419
-0.20606, 771.3406
-0.17023, 765.143
-0.13439, 765.143
-0.098561, 766.6142
-0.062727, 765.143
-0.026893, 764.4109
0.0089409, 768.5911
0.044775, 765.8774
0.080609, 764.6547
0.11644, 760.3019
0.15228, 763.1956
0.18811, 760.5419
0.22394, 763.1956
0.25978, 765.3876
0.29561, 767.6004
0.33145, 771.3406
0.36728, 771.3406
0.40311, 767.8476
0.43895, 762.9533
0.47478, 760.5419
0.51062, 760.5419
0.54645, 758.1506
0.58228, 758.1506
0.61812, 763.4382
0.65395, 763.4382
0.68979, 761.7449
0.72562, 762.9533
0.76145, 761.7449
0.79729, 753.652
0.83312, 753.1813
0.86896, 747.094
0.90479, 746.8607
0.94062, 746.6274
0.97646, 745.9278
1.0123, 744.529
1.0481,743.3636
1.084,739.8644
1.1198,739.8644
1.1556, 739.8644
1.1915, 739.8644
1.2273, 740.7982
1.2631, 743.3636
1.299, 742.8973
1.3348, 746.8607
1.3706, 748.2611
1.4065, 747.5607
1.4423, 747.5607
1.4781, 748.962
1.514, 748.962
1.5498, 749.1957
1.5856,750.1314
1.6215, 750.1314
1.6573, 750.1314
1.6931, 751.0682
1.729, 751.5371
1.7648,753.1813
1.8006,753.1813
1.8365, 752.711
1.8723, 753.8875
1.9081, 753.8875
1.944, 754.8309
1.9798, 754.8309
2.0156, 754.8309
2.0515, 753.8875
2.0873, 752.711
2.1231, 750.5996
2.159, 749.4295
2.1948, 749.4295
2.2306, 749.4295
2.2665, 749.6634
2.3023, 747.7941
2.3381, 747.7941
2.374,747.5607
2.4098,744.529
2.4456,740.5648
2.4815, 740.5648
2.5173, 741.9647
2.5532, 742.431
2.589, 740.5648
2.6248,739.6308
2.6607, 735.649
2.6965, 728.0605
2.7323, 727.0962
2.7682, 725.6389
2.804, 724.6607
2.8398, 723.6777
2.8757, 722.9375
2.9115,722.9375
2.9473,723.6777
2.9832, 725.3948
3.019,727.0962
3.0548, 726.3691
3.0907,721.947
3.1265,721.6988
3.1623,719.2053
3.1982,724.6607
3.234,723.9239
3.2698,719.2053
3.3057,706.6223
3.3415,688.7296
3.3773,643.4636
3.4132,575.6722
3.449, 519.1413
3.4848, 444.7795
3.5207, 382.8686
3.5565, 314.2999
3.5923,242.5681
3.6282,0
3.664,0
3.6998,0
3.7357,0
3.7715,0
3.8073,0
3.8432,0
3.879,0
3.9148,0
3.9507,0
3.9865,0
4.0223,0

"""

p1datos = """
-4.5611,0
-4.5253,0
-4.4895,0
-4.4536,0
-4.4178,0
-4.382,0
-4.3461,0
-4.3103,0
-4.2745,0
-4.2386,0
-4.2028,0
-4.167,0
-4.1311,0
-4.0953,0
-4.0595,0
-4.0236,0
-3.9878,0
-3.952,0
-3.9161,0
-3.8803,0
-3.8445,0
-3.8086,0
-3.7728,0
-3.737,0
-3.7011,0
-3.6653,0
-3.6295,0
-3.5936,0
-3.5578,0
-3.522,0
-3.4861,0
-3.4503,0
-3.4145,0
-3.3786,0
-3.3428,0
-3.307,3.6011
-3.2711,292.9754
-3.2353,363.7474
-3.1995,459.4775
-3.1636,554.3669
-3.1278,620.2395
-3.092,673.9312
-3.0561,694.1959
-3.0203,711.1487
-2.9845,723.9239
-2.9486,730.6874
-2.9128,735.414
-2.877,737.0571
-2.8411,740.3314
-2.8053,740.0979
-2.7694,740.3314
-2.7336,742.6642
-2.6978,745.2283
-2.6619,745.2283
-2.6261,747.5607
-2.5903,750.5996
-2.5544,750.5996
-2.5186,748.2611
-2.4828,750.3654
-2.4469,751.7717
-2.4111,756.487
-2.3753,757.6744
-2.3394,756.487
-2.3036,757.199
-2.2678,757.199
-2.2319,758.866
-2.1961,758.3889
-2.1603,759.8225
-2.1244,758.3889
-2.0886,756.487
-2.0528,747.7941
-2.0169,744.7621
-1.9811,744.7621
-1.9453,743.5967
-1.9094,744.7621
-1.8736,745.9278
-1.8378,748.0276
-1.8019,742.8973
-1.7661,742.6642
-1.7303,741.4982
-1.6944,739.8644
-1.6586,735.414
-1.6228,734.7083
-1.5869,732.8211
-1.5511,732.8211
-1.5153,733.7657
-1.4794,735.649
-1.4436,739.1635
-1.4078,741.0316
-1.3719,741.0316
-1.3361,742.8973
-1.3003,741.2649
-1.2644,735.649
-1.2286,734.9436
-1.1928,734.2373
-1.1569,731.8743
-1.1211,729.7349
-1.0853,725.6389
-1.0494,726.8542
-1.0136,725.8826
-0.97775,725.6389
-0.94192,725.6389
-0.90608,731.1626
-0.87025,731.4
-0.83442,731.4
-0.79858,729.9733
-0.76275,728.0605
-0.72691,728.0605
-0.69108,725.8826
-0.65525,722.195
-0.61941,720.9529
-0.58358,721.947
-0.54774,720.4545
-0.51191,720.205
-0.47608,719.2053
-0.44024,719.2053
-0.40441,719.2053
-0.36858,719.2053
-0.33274,714.6805
-0.29691,715.6887
-0.26107,713.6716
-0.22524,713.6716
-0.18941,713.9239
-0.15357,713.9239
-0.11774,713.9239
-0.081904,719.2053
-0.04607,716.9472
-0.010236,715.4367
0.025598,716.444
0.061432,715.4367
0.097266,715.1847
0.1331,714.1761
0.16893,711.9054
0.20477,711.9054
0.2406,710.8966
0.27644,709.1331
0.31227,708.3786
0.3481,708.3786
0.38394,704.8737
0.41977,708.3786
0.45561,702.8875
0.49144,702.8875
0.52727,704.1272
0.56311,707.3742
0.59894,707.3742
0.63478,708.1273
0.67061,710.3924
0.70644,710.3924
0.74228,711.4009
0.77811,709.6366
0.81395,709.6366
0.84978,708.8815
0.88561,702.3933
0.92145,698.9666
0.95728,702.3933
0.99312,702.3933
1.0289,701.9002
1.0648,702.8875
1.1006,706.372
1.1365,710.6444
1.1723,713.167
1.2081,711.4009
1.244,711.4009
1.2798,711.4009
1.3156,707.1234
1.3515,704.3758
1.3873,704.3758
1.4231,704.3758
1.459,704.1272
1.4948,704.8737
1.5306,703.8788
1.5665,704.1272
1.6023,704.1272
1.6381,702.1466
1.674,693.4957
1.7098,693.962
1.7456,690.5155
1.7815,690.2901
1.8173,689.1724
1.8531,690.5155
1.889,689.3947
1.9248,689.1724
1.9606,687.2001
1.9965,682.2189
2.0323,681.033
2.0681,679.6736
2.104,679.6736
2.1398,677.3997
2.1756,677.0273
2.2115,677.0273
2.2473,677.2133
2.2831,675.9208
2.319,675.9208
2.3548,675.5553
2.3906,675.5553
2.4265,674.2894
2.4623,673.3969
2.4981,673.2195
2.534,673.2195
2.5698,670.2572
2.6056,664.7371
2.6415,664.7371
2.6773,666.2182
2.7131,666.2182
2.749,666.5495
2.7848,666.5495
2.8206,665.2292
2.8565,661.3303
2.8923,658.4427
2.9281,657.8026
2.964,657.8026
2.9998,657.0025
3.0357,655.0797
3.0715,652.3385
3.1073,650.0536
3.1432,641.7004
3.179,635.7636
3.2148,0
3.2507,0
3.2865,0
3.3223,0
3.3582,0
3.394,0
3.4298,0


"""

p0datos = """
-4.1087,0
-4.0729,0
-4.0371,0
-4.0012,0
-3.9654,0
-3.9296,0
-3.8937,0
-3.8579,0
-3.822,0
-3.7862,0
-3.7504,0
-3.7145,0
-3.6787,0
-3.6429,0
-3.607,0
-3.5712,0
-3.5354,59.4973
-3.4995,278.9768
-3.4637,345.8877
-3.4279,426.9244
-3.392,505.4267
-3.3562,575.4965
-3.3204,668.2195
-3.2845,740.5648
-3.2487,796.8294
-3.2129,806.625
-3.177,810.4412
-3.1412,817.4407
-3.1054,820.9459
-3.0695,817.4407
-3.0337,814.0619
-2.9979,812.2789
-2.962,812.2789
-2.9262,810.9715
-2.8904,809.0983
-2.8545,807.1804
-2.8187,806.9031
-2.7829,804.9412
-2.747,806.9031
-2.7112,808.8269
-2.6754,809.9069
-2.6395,810.9715
-2.6037,809.9069
-2.5679,808.8269
-2.532,804.9412
-2.4962,801.5062
-2.4604,798.2992
-2.4245,795.9452
-2.3887,795.9452
-2.3529,798.2992
-2.317,800.0539
-2.2812,799.4703
-2.2454,791.2203
-2.2095,790.0419
-2.1737,788.2809
-2.1379,788.2809
-2.102,786.2407
-2.0662,782.795
-2.0304,775.6797
-1.9945,774.1295
-1.9587,772.35
-1.9229,770.0861
-1.887,769.5866
-1.8512,769.5866
-1.8153,765.6324
-1.7795,768.343
-1.7437,768.343
-1.7078,767.8476
-1.672,767.3534
-1.6362,767.8476
-1.6003,767.1067
-1.5645,767.1067
-1.5287,765.6324
-1.4928,765.6324
-1.457,763.9241
-1.4212,763.4382
-1.3853,763.4382
-1.3495,763.4382
-1.3137,765.3876
-1.2778,765.3876
-1.242,761.7449
-1.2062,761.5039
-1.1703,764.4109
-1.1345,757.199
-1.0987,760.7821
-1.0628,760.7821
-1.027,762.2276
-0.99117,761.5039
-0.95533,761.5039
-0.9195,758.866
-0.88367,764.6547
-0.84783,756.25
-0.812,756.25
-0.77616,760.0621
-0.74033,763.681
-0.7045,760.0621
-0.66866,759.3439
-0.63283,759.3439
-0.59699,759.3439
-0.56116,759.3439
-0.52533,759.3439
-0.48949,761.0225
-0.45366,761.0225
-0.41782,761.0225
-0.38199,761.0225
-0.34616,759.8225
-0.31032,765.6324
-0.27449,763.4382
-0.23865,761.9861
-0.20282,760.0621
-0.16699,758.866
-0.13115,757.9124
-0.095319,757.4366
-0.059485,757.4366
-0.023651,756.7242
0.012183,756.0131
0.048017,754.359
0.083851,757.9124
0.11969,760.0621
0.15552,761.9861
0.19135,765.3876
0.22719,779.1655
0.26302,779.7154
0.29885,779.7154
0.33469,779.7154
0.37052,771.3406
0.40636,771.3406
0.44219,773.6193
0.47802,773.8743
0.51386,773.6193
0.54969,772.8567
0.58553,771.8446
0.62136,770.5869
0.65719,770.5869
0.69303,769.3373
0.72886,768.0952
0.7647,771.3406
0.80053,769.3373
0.83636,769.3373
0.8722,768.0952
0.90803,764.4109
0.94387,763.681
0.9797,762.4692
1.0155,761.7449
1.0514,758.6274
1.0872,758.6274
1.123,759.8225
1.1589,757.9124
1.1947,760.7821
1.2305,757.9124
1.2664,756.487
1.3022,754.8309
1.338,756.487
1.3739,754.8309
1.4097,754.8309
1.4455,757.199
1.4814,757.199
1.5172,757.199
1.553,754.1232
1.5889,766.8603
1.6247,767.6004
1.6605,768.5911
1.6964,769.8362
1.7322,769.8362
1.768,768.343
1.8039,768.343
1.8397,769.8362
1.8755,772.6031
1.9114,770.8378
1.9472,776.7347
1.9831,776.7347
2.0189,776.7347
2.0547,772.35
2.0906,773.6193
2.1264,772.35
2.1622,769.5866
2.1981,772.35
2.2339,769.3373
2.2697,768.0952
2.3056,770.5869
2.3414,767.8476
2.3772,767.1067
2.4131,767.1067
2.4489,769.0883
2.4847,765.143
2.5206,765.143
2.5564,770.3364
2.5922,765.143
2.6281,765.143
2.6639,770.3364
2.6997,770.5869
2.7356,778.0759
2.7714,778.0759
2.8072,778.0759
2.8431,777.5365
2.8789,777.8057
2.9147,777.8057
2.9506,779.7154
2.9864,779.7154
3.0222,777.5365
3.0581,775.1586
3.0939,773.6193
3.1297,773.6193
3.1656,770.5869
3.2014,764.8987
3.2372,759.1049
3.2731,740.0979
3.3089,668.7252
3.3447,572.4493
3.3806,461.6378
3.4164,363.8138
3.4522,70.4645
3.4881,0
3.5239,0
3.5597,0
3.5956,0
3.6314,0
3.6672,0
3.7031,0
3.7389,0
3.7747,0
3.8106,0
3.8464,0
3.8823,0


"""

# Usamos StringIO para simular un archivo CSV a partir de las cadenas de datos
data_p4 = pd.read_csv(StringIO(p4datos), header=None, names=["posicion", "dosis"])
data_p3 = pd.read_csv(StringIO(p3datos), header=None, names=["posicion", "dosis"])
data_p2 = pd.read_csv(StringIO(p2datos), header=None, names=["posicion", "dosis"])
data_p1 = pd.read_csv(StringIO(p1datos), header=None, names=["posicion", "dosis"])
data_p0 = pd.read_csv(StringIO(p0datos), header=None, names=["posicion", "dosis"])

plt.figure(figsize=(10, 6))

plt.plot(data_p4['posicion'], data_p4['dosis'], label='p = 4 cm')
plt.plot(data_p3['posicion'], data_p3['dosis'], label='p = 3 cm')
plt.plot(data_p2['posicion'], data_p2['dosis'], label='p = 2 cm')
plt.plot(data_p1['posicion'], data_p1['dosis'], label='p = 1 cm')
plt.plot(data_p0['posicion'], data_p0['dosis'], label='p = 0 cm')

plt.xlabel('Distancia fuera del eje [cm]')
plt.ylabel('Dosis [cGy]')
plt.title('9 MeV, aplicador 10 cm, 0° ')
plt.grid()
plt.legend()

plt.show()

plt.plot(data_p4['posicion'], data_p4['dosis'], label='p = 4 cm')

# Implementar análisis para cada perfil de profundidad

profundidades = [data_p4, data_p3, data_p2, data_p1, data_p0]
resultados_fwhm = []
resultados_simetria_planitud = []

for i, data in enumerate(profundidades):
    posicion = data['posicion'].values
    dosis = data['dosis'].values

    # FWHM
    fwhm = calcular_fwhm(posicion, dosis)
    if fwhm is not None:
        print(f'FWHM para p = {4-i} cm: {fwhm:.2f} cm')
    else:
        print(f'FWHM no se pudo calcular para p = {4-i} cm')
    resultados_fwhm.append(fwhm)

    # Simetría y planitud
    simetria, planitud = calcular_simetria_planitud(posicion, dosis)
    if planitud is not None:
        print(f'Simetría para p = {4-i} cm: {simetria:.2f}%')
        print(f'Planitud para p = {4-i} cm: {planitud:.2f}%')
    else:
        print(f'Planitud no se pudo calcular para p = {4-i} cm')

    resultados_simetria_planitud.append((simetria, planitud))

# Visualizar los resultados
print("\nResultados FWHM (Ancho del Haz a la Mitad de la Dosis):", resultados_fwhm)
print("\nResultados de Simetría y Planitud (en porcentaje):", resultados_simetria_planitud)

# Función para calcular FWHM (Full Width Half Maximum)
def calcular_fwhm(posicion, dosis):
    max_dosis = max(dosis)
    half_max_dosis = max_dosis / 2

    # Buscar las posiciones donde la dosis es mayor o igual al 50% de la dosis máxima
    posiciones_half_max = np.where(dosis >= half_max_dosis)[0]

    if len(posiciones_half_max) > 1:
        fwhm_start = posicion[posiciones_half_max[0]]  # Primera posición donde se alcanza el 50%
        fwhm_end = posicion[posiciones_half_max[-1]]  # Última posición donde se alcanza el 50%
        fwhm = abs(fwhm_end - fwhm_start)
        return fwhm, fwhm_start, fwhm_end
    else:
        # Si no se puede calcular el FWHM, devuelve None para los tres valores
        return None, None, None

# Función corregida para calcular la simetría y planitud
def calcular_simetria_planitud(posicion, dosis):
    # Simetría: Compara la dosis a ambos lados del eje central (posicion 0)
    indice_central = np.argmin(np.abs(posicion))  # Encuentra el índice más cercano a 0 (eje central)
    dosis_central = dosis[indice_central]

    izquierda = dosis[:indice_central]
    derecha = dosis[indice_central+1:][::-1]  # Invertir la parte derecha para comparar con la izquierda

    # Asegurarnos de que las dos partes tengan la misma longitud
    if len(izquierda) > len(derecha):
        izquierda = izquierda[:len(derecha)]
    elif len(derecha) > len(izquierda):
        derecha = derecha[:len(izquierda)]

    simetria = np.mean(np.abs(izquierda - derecha) / dosis_central) * 100  # Error relativo porcentual

    # Planitud: Variación dentro del área entre el 80% y 100% de la dosis máxima
    max_dosis = max(dosis)
    limite_inferior = 0.8 * max_dosis

    # Filtrar la región de interés (dosis >= 80% de la dosis máxima)
    indices_region = np.where(dosis >= limite_inferior)[0]

    if len(indices_region) > 0:
        dosis_region = dosis[indices_region]
        max_region = max(dosis_region)
        min_region = min(dosis_region)
        planitud = (max_region - min_region) / (max_region + min_region) * 100
    else:
        planitud = None
        limite_inferior = None
        indices_region = None

    return simetria, planitud, limite_inferior, indices_region

# Implementar análisis para cada perfil de profundidad
profundidades = [data_p4, data_p3, data_p2, data_p1, data_p0]
etiquetas = ['p = 4 cm', 'p = 3 cm', 'p = 2 cm', 'p = 1 cm', 'p = 0 cm']
colores = ['b', 'g', 'r', 'orange', 'purple']

# Generar gráficos individuales para cada curva
for i, data in enumerate(profundidades):
    posicion = data['posicion'].values
    dosis = data['dosis'].values

    # FWHM
    fwhm, fwhm_start, fwhm_end = calcular_fwhm(posicion, dosis)

    # Simetría y planitud
    simetria, planitud, limite_inferior, indices_region = calcular_simetria_planitud(posicion, dosis)

    # Crear un gráfico individual para cada perfil
    plt.figure(figsize=(10, 6))

    # Graficar el perfil
    plt.plot(posicion, dosis, label=etiquetas[i], color=colores[i])

    # Añadir líneas de FWHM en la gráfica (con opacidad baja)
    if fwhm is not None:
        plt.axvline(fwhm_start, color=colores[i], linestyle='--', alpha=0.5, label=f'FWHM: {fwhm:.2f} cm')
        plt.axvline(fwhm_end, color=colores[i], linestyle='--', alpha=0.5)

    # Añadir la región de 80% a 100% de la dosis máxima (planitud)
    if indices_region is not None:
        plt.fill_between(posicion[indices_region], dosis[indices_region], color=colores[i], alpha=0.15, label='Planitud')

    # Imprimir los resultados
    if fwhm is not None:
        print(f'FWHM para {etiquetas[i]}: {fwhm:.2f} cm')
    print(f'Simetría para {etiquetas[i]}: {simetria:.2f}%')
    if planitud is not None:
        print(f'Planitud para {etiquetas[i]}: {planitud:.2f}%')

    # Configuración de la gráfica
    plt.xlabel('Distancia fuera del eje [cm]')
    plt.ylabel('Dosis [cGy]')
    plt.title(f'Análisis de Perfil de Radiación para {etiquetas[i]}')
    plt.grid()

    # Ajustar la leyenda para ser más clara
    plt.legend(loc='upper right', fontsize='small')

    # Mostrar la gráfica individual
    plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import interp1d

# Función corregida para calcular FWHM
def calcular_fwhm(posicion, dosis):
    max_dosis = max(dosis)
    half_max_dosis = max_dosis / 2

    posiciones_half_max = np.where(dosis >= half_max_dosis)[0]

    if len(posiciones_half_max) > 1:
        fwhm_start = posicion[posiciones_half_max[0]]  # Primera posición donde se alcanza el 50%
        fwhm_end = posicion[posiciones_half_max[-1]]  # Última posición donde se alcanza el 50%
        fwhm = abs(fwhm_end - fwhm_start)
        return fwhm, fwhm_start, fwhm_end
    else:
        return None, None, None

# Función corregida para calcular la simetría y planitud
def calcular_simetria_planitud(posicion, dosis):
    indice_central = np.argmin(np.abs(posicion))  # Encuentra el índice más cercano a 0 (eje central)
    dosis_central = dosis[indice_central]

    izquierda = dosis[:indice_central]
    derecha = dosis[indice_central+1:][::-1]  # Invertir la parte derecha para comparar con la izquierda

    if len(izquierda) > len(derecha):
        izquierda = izquierda[:len(derecha)]
    elif len(derecha) > len(izquierda):
        derecha = derecha[:len(izquierda)]

    simetria = np.mean(np.abs(izquierda - derecha) / dosis_central) * 100  # Error relativo porcentual

    # Planitud: Variación dentro del área entre el 80% y 100% de la dosis máxima
    max_dosis = max(dosis)
    limite_inferior = 0.8 * max_dosis

    # Filtrar la región de interés (dosis >= 80% de la dosis máxima)
    indices_region = np.where(dosis >= limite_inferior)[0]

    if len(indices_region) > 0:
        dosis_region = dosis[indices_region]
        max_region = max(dosis_region)
        min_region = min(dosis_region)
        planitud = (max_region - min_region) / (max_region + min_region) * 100
    else:
        planitud = None

    return simetria, planitud

# Implementar análisis para cada perfil de profundidad
profundidades = [data_p4, data_p3, data_p2, data_p1, data_p0]
etiquetas = ['p = 4 cm', 'p = 3 cm', 'p = 2 cm', 'p = 1 cm', 'p = 0 cm']

# Crear una lista para almacenar los resultados
resultados = []

# Realizar el análisis para cada perfil
for i, data in enumerate(profundidades):
    posicion = data['posicion'].values
    dosis = data['dosis'].values

    # Calcular FWHM
    fwhm, _, _ = calcular_fwhm(posicion, dosis)

    # Calcular simetría y planitud
    simetria, planitud = calcular_simetria_planitud(posicion, dosis)

    # Agregar los resultados a la lista
    resultados.append({
        'Profundidad': etiquetas[i],
        'FWHM (cm)': fwhm if fwhm is not None else 'N/A',
        'Simetría (%)': simetria if simetria is not None else 'N/A',
        'Planitud (%)': planitud if planitud is not None else 'N/A'
    })

# Convertir los resultados a un DataFrame de pandas para generar la tabla
df_resultados = pd.DataFrame(resultados)

# Mostrar la tabla
print(df_resultados)

# Opcional: Guardar la tabla en un archivo Excel o CSV
df_resultados.to_csv('resumen_analisis_radiacion.csv', index=False)
# df_resultados.to_excel('resumen_analisis_radiacion.xlsx', index=False)
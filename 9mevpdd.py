# -*- coding: utf-8 -*-
"""9MeVPDD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ch7_iEFTC4XyFKSuCvamg6lMVqSJHoOj
"""

import io
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Lectura de datos de profundidad
profundidad = pd.read_csv(io.StringIO('''
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
57
59
61
63
65
70
75
'''), header=None)

# Lectura de datos de dosis
dosis = pd.read_csv(io.StringIO('''
"8,81E+01"
"8,87E+01"
"8,95E+01"
"9,08E+01"
"9,18E+01"
"9,27E+01"
"9,34E+01"
"9,41E+01"
"9,47E+01"
"9,56E+01"
"9,64E+01"
"9,69E+01"
"9,75E+01"
"9,82E+01"
"9,88E+01"
"9,92E+01"
"9,96E+01"
"9,98E+01"
"1,00E+02"
"9,99E+01"
"9,95E+01"
"9,91E+01"
"9,82E+01"
"9,71E+01"
"9,53E+01"
"9,32E+01"
"9,10E+01"
"8,81E+01"
"8,42E+01"
"8,06E+01"
"7,67E+01"
"7,16E+01"
"6,61E+01"
"6,12E+01"
"5,54E+01"
"4,91E+01"
"4,35E+01"
"3,76E+01"
"3,15E+01"
"2,57E+01"
"2,09E+01"
"1,63E+01"
"1,19E+01"
"8,44E+00"
"5,96E+00"
"3,98E+00"
"2,38E+00"
"1,46E+00"
"9,81E-01"
"6,57E-01"
"5,01E-01"
"4,47E-01"
"4,15E-01"
"4,10E-01"
"4,03E-01"
"4,10E-01"
"3,99E-01"
"3,89E-01"
"3,78E-01"
"3,79E-01"
"3,56E-01"
"3,48E-01"
"3,15E-01"
'''), header=None)

# Convertir datos de dosis al formato correcto (númerico) reemplazando comas por puntos
dosis[0] = dosis[0].str.replace(',', '.').astype(float)

# Función para calcular la profundidad de Dmax
def calcular_dmax(profundidad, dosis):
    dmax_valor = max(dosis)
    dmax_indice = dosis.idxmax()
    dmax_profundidad = profundidad[dmax_indice]
    return dmax_valor, dmax_profundidad

# Función para encontrar la profundidad donde la dosis cae al porcentaje especificado
def calcular_profundidad_porcentaje(profundidad, dosis, porcentaje):
    dmax_valor = max(dosis)
    valor_porcentaje = dmax_valor * porcentaje
    profundidades_menores = profundidad[dosis <= valor_porcentaje]
    if len(profundidades_menores) > 0:
        return profundidades_menores.iloc[0]  # Primer valor donde cae por debajo del porcentaje
    return None

# Función para obtener la dosis en profundidades específicas (1 cm, 2 cm, 3 cm, 4 cm)
def dosis_en_profundidades_especificas(profundidad, dosis, profundidades_deseadas):
    dosis_profundidades = {}
    for p in profundidades_deseadas:
        # Buscar la profundidad más cercana a la deseada
        diferencia = abs(profundidad - p)
        indice_mas_cercano = diferencia.idxmin()
        dosis_profundidades[p] = dosis[indice_mas_cercano]
    return dosis_profundidades

# Cálculo de Dmax
dmax_valor, dmax_profundidad = calcular_dmax(profundidad[0], dosis[0])

# Cálculo de profundidades al 50% y 90% de la dosis
profundidad_50 = calcular_profundidad_porcentaje(profundidad[0], dosis[0], 0.50)
profundidad_90 = calcular_profundidad_porcentaje(profundidad[0], dosis[0], 0.90)

# Cálculo de dosis en profundidades específicas
profundidades_deseadas = [10, 20, 30, 40]  # 1 cm, 2 cm, 3 cm, 4 cm
dosis_en_profundidades = dosis_en_profundidades_especificas(profundidad[0], dosis[0], profundidades_deseadas)

# Graficar la curva PDD
plt.figure(figsize=(10, 6))
plt.plot(profundidad[0], dosis[0], marker='o', linestyle='-', color='b', label='Curva PDD')

# Añadir puntos de análisis en la gráfica
plt.axvline(dmax_profundidad, color='r', linestyle='--', label=f'Dmax ({dmax_profundidad} mm)')
if profundidad_50 is not None:
    plt.axvline(profundidad_50, color='g', linestyle='--', label=f'50% Dmax ({profundidad_50} mm)')
if profundidad_90 is not None:
    plt.axvline(profundidad_90, color='orange', linestyle='--', label=f'90% Dmax ({profundidad_90} mm)')

# Añadir puntos para las profundidades deseadas (1 cm, 2 cm, 3 cm, 4 cm)
for p in profundidades_deseadas:
    plt.scatter(p, dosis_en_profundidades[p], color='purple', zorder=5)
    plt.text(p, dosis_en_profundidades[p], f'{p/10:.1f} cm\n{dosis_en_profundidades[p]:.2f}%',
             ha='center', va='bottom', color='purple')

# Añadir leyenda y detalles de la gráfica
plt.title('Curva de Porcentaje de Dosis en Profundidad (PDD)')
plt.xlabel('Profundidad [mm]')
plt.ylabel('Porcentaje de Dosis [%]')
plt.grid(True)
plt.legend()
plt.show()

# Mostrar los resultados en consola
print(f"Dmax: {dmax_valor}% a {dmax_profundidad} mm")
print(f"Profundidad al 50% de Dmax: {profundidad_50} mm")
print(f"Profundidad al 90% de Dmax: {profundidad_90} mm")

# Mostrar dosis en profundidades específicas
for p in profundidades_deseadas:
    print(f"Dosis a {p/10:.1f} cm: {dosis_en_profundidades[p]:.2f}%")